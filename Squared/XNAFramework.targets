<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <XNAPropertiesOverridePath>$(SolutionDir)XNA.Override.props</XNAPropertiesOverridePath>
  </PropertyGroup>

  <Import Project="$(XNAPropertiesOverridePath)" Condition="Exists('$(XNAPropertiesOverridePath)')" />

  <PropertyGroup>
    <FNALibsPath Condition="'$(FNALibsPath)' == ''">$(FNAPath)\fnalibs</FNALibsPath>
    <EnableFNA Condition="'$(EnableFNA)' == ''">false</EnableFNA>
    <ShaderBinDirectory Condition="'$(ShaderBinDirectory)' == ''">$(ShaderDirectory)\bin</ShaderBinDirectory>
    <ShaderLocalBinDirectory>$(ShaderBinDirectory)\$(Configuration)</ShaderLocalBinDirectory>
    <ShaderCompilerPath>$(SquaredPath)\ShaderCompiler\bin\ShaderCompiler.exe</ShaderCompilerPath>
    <!-- workaround for wildcard includes breaking in VS -->
    <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
    <!-- Squared libraries use Unsafe so just enable it -->
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <AutoPlatforms Condition="'$(AutoPlatforms)' == ''">false</AutoPlatforms>
    <TestParsePath Condition="'$(GenerateShaderDisassembly)' != 'false'">$(FNALibsPath)\x86\testparse.exe</TestParsePath>
    <TestParsePath Condition="!Exists('$(TestParsePath)')"></TestParsePath>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <ShaderOptimizationLevel Condition=" '$(ShaderOptimizationLevel)' == '' ">d</ShaderOptimizationLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' != 'Debug' ">
    <ShaderOptimizationLevel Condition=" '$(ShaderOptimizationLevel)' == '' ">3</ShaderOptimizationLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Platform)' == 'x86' ">
    <AutoEnableFNA>false</AutoEnableFNA>
    <AutoPlatformTarget>x86</AutoPlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Platform)' == 'FNA' ">
    <AutoEnableFNA>true</AutoEnableFNA>
    <AutoPlatformTarget>x86</AutoPlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Platform)' == 'FNA-x64' ">
    <AutoEnableFNA>true</AutoEnableFNA>
    <AutoPlatformTarget>x64</AutoPlatformTarget>
  </PropertyGroup>

  <PropertyGroup Condition="'$(AutoPlatforms)' == 'true'">
    <EnableFNA>$(AutoEnableFNA)</EnableFNA>
  </PropertyGroup>

  <PropertyGroup Condition="'$(EnableFNA)' == 'true'">
    <DefineConstants>$(DefineConstants);FNA;SDL2</DefineConstants>
    <DefineConstants Condition="'$(ISwearIAmThreadSafe)' == 'true' ">$(DefineConstants);DISABLE_THREADING</DefineConstants>
    <PlatformTarget Condition=" '$(AutoPlatforms)' == 'true' ">$(AutoPlatformTarget)</PlatformTarget>
    <ShaderCompilerDefines>$(ShaderCompilerDefines)/D FNA=1 /D XNA=0</ShaderCompilerDefines>
  </PropertyGroup>

  <PropertyGroup Condition="'$(EnableFNA)' == 'false'">
    <XnaFrameworkVersion>v4.0</XnaFrameworkVersion>
    <XnaPlatform>Windows</XnaPlatform>
    <XnaProfile>HiDef</XnaProfile>
    <DefineConstants>$(DefineConstants);XNA;WINDOWS</DefineConstants>
    <PlatformTarget>x86</PlatformTarget>
    <Prefer32Bit>true</Prefer32Bit>
    <XnaOutputType Condition="'$(OutputType)' == 'WinExe'">Game</XnaOutputType>
    <ShaderCompilerDefines>$(ShaderCompilerDefines)/D FNA=0 /D XNA=1</ShaderCompilerDefines>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(EnableFNA)' == 'false'">
      <ItemGroup>
        <Reference Include="Microsoft.Xna.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553">
          <Private>False</Private>
        </Reference>
      </ItemGroup>
      <ItemGroup Condition="'$(XNAFrameworkOnly)' != 'true'">
        <Reference Include="Microsoft.Xna.Framework.Game, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553">
          <Private>False</Private>
        </Reference>
        <Reference Include="Microsoft.Xna.Framework.Graphics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=x86">
          <Private>False</Private>
        </Reference>
        <Reference Include="Microsoft.Xna.Framework.Net, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=MSIL">
          <Private>False</Private>
        </Reference>
        <Reference Include="Microsoft.Xna.Framework.Storage, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=MSIL">
          <Private>False</Private>
        </Reference>
      </ItemGroup>
    </When>
    <When Condition="'$(EnableFNA)' == 'true'">
      <ItemGroup>
        <ProjectReference Include="$(FNAPath)\FNA.csproj">
          <Project>{35253CE1-C864-4CD3-8249-4D1319748E8F}</Project>
          <Name>FNA</Name>
        </ProjectReference>
        <None Include="$(FNALibsPath)\$(PlatformTarget)\*.dll">
          <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </None>
        <None Include="$(FNALibsPath)\$(PlatformTarget)\*.pdb">
          <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </None>
      </ItemGroup>
    </When>
  </Choose>  

  <Target Name="ValidateFNAPaths" BeforeTargets="BeforeBuild">
    <Message Text="Configuration: $(Configuration)" />
    <Message Text="Platform: $(Platform)" />
    <Message Text="No property overrides found at '$(XNAPropertiesOverridePath)'" Condition="!Exists('$(XNAPropertiesOverridePath)')" />
    <Message Importance="High"  Text="Loaded property overrides from '$(XNAPropertiesOverridePath)'" Condition="Exists('$(XNAPropertiesOverridePath)')" />
    <Message Importance="High" Text="Automatic platforms enabled? $(AutoPlatforms)" />
    <Message Importance="High" Condition="'$(AutoPlatforms)' == 'true'" Text="Automatic platforms selected FNA? $(AutoEnableFNA)" />
    <Message Importance="High" Text="FNA enabled? $(EnableFNA)" />
    <Message Importance="High" Condition="'$(EnableFNA)' == 'true'" Text="FNA path: '$(FNAPath)'" />
    <Message Importance="High" Condition="'$(EnableFNA)' == 'true'" Text="FNAlibs path: '$(FNALibsPath)'" />
    <Message Importance="High" Text="testparse.exe path: '$(TestParsePath)'" />
    <Message Importance="High" Condition="'$(ShaderDirectory)' != ''" Text="Shader compiler path: '$(ShaderCompilerPath)'" />
    <Message Importance="High" Condition="'$(ShaderDirectory)' != ''" Text="Shader directory: '$(ShaderDirectory)'" />
    <Message Importance="High" Condition="'$(ShaderDirectory)' != ''" Text="Shader output directory: '$(ShaderLocalBinDirectory)'" />
    <Message Importance="High" Condition="'$(ShaderDirectory)' != ''" Text="Shader optimization level: $(ShaderOptimizationLevel)" />    

    <Error Text="You must set FNAPath" Condition=" ('$(FNAPath)' == '') And ('$(EnableFNA)' == 'true') " />

    <Error Text="FNALibsPath '$(FNALibsPath)' does not exist or is not set" Condition=" !Exists('$(FNALibsPath)') And ('$(EnableFNA)' == 'true') " />
  </Target>

  <Target Name="CleanShaders" Condition="'$(ShaderDirectory)' != ''" AfterTargets="Clean">
    <Message Importance="High" Text="Cleaning shaders" />

    <Exec Command='del /Q /S "$(ShaderLocalBinDirectory)\*.bin"' />
    <Exec Command='del /Q /S "$(ShaderLocalBinDirectory)\*.glsl"' />
  </Target>

  <!-- FIXME: I want this to run only during Rebuild
  <Target Name="CleanShadersDuringRebuild" Condition=" '$(ShaderDirectory)' != '' " BeforeTargets="Rebuild;CompileShaders">
    <Message Importance="High" Text="Cleaning shaders" />

    <Exec Command='del /Q /S "$(ShaderLocalBinDirectory)\*.bin"' />
  </Target>
  -->

  <Target Name="CompileShaders" Condition="'$(ShaderDirectory)' != ''" BeforeTargets="BeforeBuild">
    <Message Text="Loaded property overrides from '$(XNAPropertiesOverridePath)'" />
    <Message Importance="High" Text="Compiling shaders" />
    <Error Text="You must set SquaredPath to use the shader compiler" Condition=" '$(SquaredPath)' == '' " />

    <Exec Command='"$(ShaderCompilerPath)" "$(SquaredPath)\ext\fxc" "$(ShaderDirectory)" "$(ShaderLocalBinDirectory)" "/O$(ShaderOptimizationLevel) /Zi $(ShaderCompilerDefines)" "$(TestParsePath)"' />
  </Target>

  <ItemGroup Condition="'$(ShaderDirectory)' != ''">
    <ShaderText Include="$(ShaderDirectory)\*.fx" />
    <None Include="$(ShaderDirectory)\*.fxh" />
    <EmbeddedResource Include="@(ShaderText -> '$(ShaderLocalBinDirectory)\%(Filename).fx.bin')">
      <LogicalName>%(Filename)</LogicalName>
    </EmbeddedResource>
  </ItemGroup>
</Project>